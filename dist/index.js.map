{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.data] - dataset name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'data': 'army'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'data' ) ) {\n\t\topts.data = options.data;\n\t\tif ( !isString( opts.data ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'data', opts.data ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar readJSON = require( '@stdlib/fs-read-json' ).sync;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar keys = [ 'army', 'cities', 'labels', 'rivers', 'temperature' ];\nvar minardData = {\n\t'army': resolve( __dirname, '..', 'data', 'army.json' ),\n\t'cities': resolve( __dirname, '..', 'data', 'cities.json' ),\n\t'labels': resolve( __dirname, '..', 'data', 'labels.json' ),\n\t'rivers': resolve( __dirname, '..', 'data', 'rivers.geo.json' ),\n\t'temperature': resolve( __dirname, '..', 'data', 'temperature.json' )\n};\nvar fopts = {\n\t'encoding': 'utf8'\n};\n\n\n// MAIN //\n\n/**\n* Returns datasets for Charles Joseph Minard's cartographic depiction of Napoleon's Russian campaign of 1812.\n*\n* ## Notes\n*\n* -   This function synchronously reads data from disk for each invocation. Such behavior is intentional and so is the avoidance of `require`. We assume that invocations are infrequent, and we want to avoid the `require` cache. This means that we allow data to be garbage collected and a user is responsible for explicitly caching data.\n*\n* @param {Options} [options] - options object\n* @param {string} [options.data] - dataset name\n* @throws {Error} unable to read data\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a recognized dataset name\n* @returns {(Object|ObjectArray)} dataset(s)\n*\n* @example\n* var data = minard();\n* // returns <Object>\n*\n* @example\n* var data = minard({\n*\t'data': 'army'\n* });\n* // returns <ObjectArray>\n*/\nfunction minard( options ) {\n\tvar opts;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar val;\n\tvar i;\n\n\tif ( arguments.length > 0 ) {\n\t\topts = {};\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.data ) {\n\t\t\tif ( !hasOwnProp( minardData, opts.data ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'data', keys.join( '\", \"' ), opts.data ) );\n\t\t\t}\n\t\t\tout = readJSON( minardData[ opts.data ], fopts );\n\t\t\tif ( out instanceof Error ) {\n\t\t\t\tthrow out;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n\tout = {};\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tkey = keys[ i ];\n\t\tval = readJSON( minardData[ key ] );\n\t\tif ( val instanceof Error ) {\n\t\t\tthrow val;\n\t\t}\n\t\tout[ key ] = val;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minard;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Data for Charles Joseph Minard's cartographic depiction of Napoleon's Russian campaign of 1812.\n*\n* @module @stdlib/datasets-minard-napoleons-march\n*\n* @example\n* var minard = require( '@stdlib/datasets-minard-napoleons-march' );\n*\n* var data = minard();\n* // returns {...}\n*\n* @example\n* var minard = require( '@stdlib/datasets-minard-napoleons-march' );\n*\n* var opts = {\n*     'data': 'army'\n* };\n*\n* var data = minard( opts );\n* // returns [{...},{...},...]\n*/\n\n// MODULES //\n\nvar minard = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minard;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,gCAAiC,EACrDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,uBAAwB,EAwB9C,SAASC,EAAUC,EAAMC,EAAU,CAClC,OAAML,EAAUK,CAAQ,EAGnBN,EAAYM,EAAS,MAAO,IAChCD,EAAK,KAAOC,EAAQ,KACf,CAACJ,EAAUG,EAAK,IAAK,GAClB,IAAI,UAAWF,EAAQ,8DAA+D,OAAQE,EAAK,IAAK,CAAE,EAG5G,KARC,IAAI,UAAWF,EAAQ,qEAAsEG,CAAQ,CAAE,CAShH,CAKAP,EAAO,QAAUK,ICjEjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,MAAO,EAAE,QAC5BC,EAAW,QAAS,sBAAuB,EAAE,KAC7CC,EAAa,QAAS,iCAAkC,EACxDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IAKXC,EAAO,CAAE,OAAQ,SAAU,SAAU,SAAU,aAAc,EAC7DC,EAAa,CAChB,KAAQN,EAAS,UAAW,KAAM,OAAQ,WAAY,EACtD,OAAUA,EAAS,UAAW,KAAM,OAAQ,aAAc,EAC1D,OAAUA,EAAS,UAAW,KAAM,OAAQ,aAAc,EAC1D,OAAUA,EAAS,UAAW,KAAM,OAAQ,iBAAkB,EAC9D,YAAeA,EAAS,UAAW,KAAM,OAAQ,kBAAmB,CACrE,EACIO,EAAQ,CACX,SAAY,MACb,EA8BA,SAASC,EAAQC,EAAU,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,UAAU,OAAS,EAAI,CAG3B,GAFAL,EAAO,CAAC,EACRC,EAAMP,EAAUM,EAAMD,CAAQ,EACzBE,EACJ,MAAMA,EAEP,GAAKD,EAAK,KAAO,CAChB,GAAK,CAACR,EAAYI,EAAYI,EAAK,IAAK,EACvC,MAAM,IAAI,WAAYP,EAAQ,gFAAiF,OAAQE,EAAK,KAAM,MAAO,EAAGK,EAAK,IAAK,CAAE,EAGzJ,GADAG,EAAMZ,EAAUK,EAAYI,EAAK,IAAK,EAAGH,CAAM,EAC1CM,aAAe,MACnB,MAAMA,EAEP,OAAOA,CACR,CACD,CAEA,IADAA,EAAM,CAAC,EACDE,EAAI,EAAGA,EAAIV,EAAK,OAAQU,IAAM,CAGnC,GAFAH,EAAMP,EAAMU,CAAE,EACdD,EAAMb,EAAUK,EAAYM,CAAI,CAAE,EAC7BE,aAAe,MACnB,MAAMA,EAEPD,EAAKD,CAAI,EAAIE,CACd,CACA,OAAOD,CACR,CAKAd,EAAO,QAAUS,ICnEjB,IAAIQ,EAAS,IAKb,OAAO,QAAUA",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "hasOwnProp", "isObject", "isString", "format", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "resolve", "readJSON", "hasOwnProp", "format", "validate", "keys", "minardData", "fopts", "minard", "options", "opts", "err", "key", "out", "val", "i", "minard"]
}
